<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://hechen0.com/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 15 Apr 2018 10:19:05 +0800</lastBuildDate>
    
	<atom:link href="http://hechen0.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis Pagination</title>
      <link>http://hechen0.com/posts/redis-pagination/</link>
      <pubDate>Sun, 15 Apr 2018 10:19:05 +0800</pubDate>
      
      <guid>http://hechen0.com/posts/redis-pagination/</guid>
      <description>问题 分页是web应用中非常常见的需求，分页结果来自数据库查询，如何对这个分页结果使用Redis进行缓存呢？
下面我说说常见的几种方案，并简单说说各自优劣。
方案一 最简单的方式是按照sql作为缓存key(如将语句 &amp;ldquo;select * from comments limit 10 offset 0&amp;rdquo; md5)，结果作为value，如果同样的sql查询发生了，我们就可以命中缓存
pro:
 实现简单  con:
 缓存的数据极有可能存在冗余，如条件&amp;rdquo;limit 10 offset 0&amp;rdquo;和&amp;rdquo;limit 10 offset 5&amp;rdquo;，重复的数据存储在不同的redis key中 只要查询的sql变化，就不会命中缓存 缓存一致性很难保证，如果更新了数据或者添加了新的记录，有的缓存会失效，但很难直接知道哪个key失效了(如总共100条记录，更新了第50条记录，难以知道哪次sql查询缓存了第50条记录)，最简单的做法就是将所有的满足pattern的key清空，比如上述的key可以加上前缀 sql_cache:6f7cb75b5cfe12ca1f51647b0f440251 使用 keys sql_cache:* 找出所有的key，然后清空。  在分页这种场景下，使用最常用的缓存方式有很多问题，所以还是不考虑这种方式。
方案二 redis的list配合hash也可以满足分页需求，将一类记录(如一篇博文下的所有评论id)按照需要的顺序PUSH到一个key下(如blog:2)，将评论的内容放到hash中，使用LRANGE blog:2:comments 0 10，可以做到对查询直接进行分页，使用HMGET获取评论的具体内容
pro:
 缓存的数据不存在冗余 支持元素更新，可以hset来更新某一个元素  con:
 只适用于分页顺序不会发生变化的，一旦需要更改元素之间的顺序，需要重新生成整个list 因为只有一个key，所以在并发写的情况下，LIST中的顺序和数据库中的顺序可能不一样，不太适合频繁写的场景  方案三 redis的zset配合hash是第三种方案。排序权重就是zset中的score值，比如可以用时间戳作为元素的score，分页使用ZRANGEBYSCORE命令，配合上zrangebyscore支持的limit offset，取具体的数据还是使用hash。
pro: 前两条和方案二的相同，外加解决了方案二的两个缺陷。
 支持对元素顺序的更改，如果是按照更新时间戳排序，可以使用zadd改变某个元素的score值 即使在并发写的情况，由于元素的顺序只和score值有关，所以并不会出现顺序不一致的情况  方案四 set/list、hash配合sort命令，redis提供的sort命令可以直接对hash的属性进行排序 sort命令本身也支持limit offset参数。
方案五 看到网上有人说可以使用redis的scan(增量遍历)来做分页，这个就不太合适了。
redis的scan redis的scan是一种增量遍历(incrementally iterate)，什么叫增量遍历呢?</description>
    </item>
    
    <item>
      <title>Golang中的 struct tag</title>
      <link>http://hechen0.com/posts/struct-tag-golang/</link>
      <pubDate>Thu, 12 Apr 2018 20:47:04 +0800</pubDate>
      
      <guid>http://hechen0.com/posts/struct-tag-golang/</guid>
      <description>struct tag简介 在Go语言中我们通常使用struct来的表示复杂的数据结构，比如二维平面上的一个点，可以用下面的struct表示
type Point struct { X int64 Y int64 } struct提供的功能不仅限于此，下面介绍下struct中的tag。
我们可以在struct中的每一个field后面添加一段额外的注释或者说明，来引导struct的encoding到某种格式中，这部分额外的注释说明，我们称之为struct中的field tag，比如:
type Person struct { FirstName string `json:&amp;#34;first_name&amp;#34;` LastName string `json:&amp;#34;last_name&amp;#34;` MiddleName string `json:&amp;#34;middle_name,omitempty&amp;#34;` } 这里我们定义了一个名为Person的struct，使用tag来指定encoding到json后，各个field在json中的key名称，在最后一个field tag中，我们额外添加了额外的omitempty选项，指示在encoding成json时，如果MiddleName==&amp;ldquo;&amp;ldquo;，那么encoding成json的时候忽略它。如:
p = Person{FirstName: &amp;#34;chen&amp;#34;, LastName:&amp;#34;he&amp;#34;} 对应的encoding后的json就是
{ &amp;#34;first_name&amp;#34;:&amp;#34;chen&amp;#34;, &amp;#34;last_name&amp;#34;:&amp;#34;he&amp;#34; } 关于更多格式的tag选项见本文末尾
struct tag的解析 在Go语言中field tag是用 reflect.StructTag 这个结构表示的，reflect.StructTag对应于一个string
package reflect type StructTag string 这个string的按照惯例是由多个 key:&amp;ldquo;value&amp;rdquo; 连接而成，每一组 key:&amp;ldquo;value&amp;rdquo;都代表一种encoding格式，例如:
Name string `json:&amp;#34;name&amp;#34; xml:&amp;#34;name&amp;#34;` 但是我们也可以完全不用遵守这种惯例，自定义一套解释规则。
我们可以使用Go提供的 reflect 包来读取tag中的信息，首先我们需要先获取struct的Type，接着使用 Type.Field 、Type.FieldByIndex 或者 Type.FieldByName 来获取struct中的某一个field，获取到的field中就包含了StructTag信息。举例:</description>
    </item>
    
    <item>
      <title>xorm对于表名的缓存</title>
      <link>http://hechen0.com/posts/xorm%E5%AF%B9%E4%BA%8E%E8%A1%A8%E5%90%8D%E7%9A%84%E7%BC%93%E5%AD%98/</link>
      <pubDate>Wed, 28 Mar 2018 19:30:42 +0800</pubDate>
      
      <guid>http://hechen0.com/posts/xorm%E5%AF%B9%E4%BA%8E%E8%A1%A8%E5%90%8D%E7%9A%84%E7%BC%93%E5%AD%98/</guid>
      <description>最近碰到一个坑
golang中的orm库: xorm
如果不显示传入表名的话，xorm库可以根据你传入的struct主动调用定义的Tablename()方法去推断表名的。
但是这个表名是有缓存的，缓存的结构是map[reflect.Type]string，如果能读到缓存，不会调用Tablename()方法。
最近碰到的坑就是我们在业务层做了分表，导致不能依赖这种隐式推出表名的方法。
对于分表而言，传入的struct是相同的，所以reflect.Type也是相同的，所以只会在缓存不存在的时候调用Tablename()方法。</description>
    </item>
    
    <item>
      <title>Helloworld</title>
      <link>http://hechen0.com/posts/helloworld/</link>
      <pubDate>Thu, 26 Feb 2015 21:43:14 +0800</pubDate>
      
      <guid>http://hechen0.com/posts/helloworld/</guid>
      <description>Hello World</description>
    </item>
    
  </channel>
</rss>